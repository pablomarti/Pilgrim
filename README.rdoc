= Pilgrim
----

Choose countries, states and cities via Ajax


=== Installation

1. Add to your gemfile: <tt>gem 'pilgrim'</tt>
2. Run <tt>bundle</tt>
3. Execute: <tt>rails generate pilgrim:install</tt>
4. Run migrations: <tt>rake db:migrate</tt>
5. Run: <tt>rake db:seed</tt>
6. Add to your routes.rb: <tt>mount Pilgrim::Engine => "/pilgrim", :as => "pilgrim"</tt>
7. Add to your application.js: <tt>//= require pilgrim/application</tt>
8. (Optional) Generate the views so you can configure them executing: <tt>rails generate pilgrim:generate_views</tt> (this will save the views in your_project/app/views/pilgrim)
9. Watch the test/dummy for an example (watch the welcome controller and its views)
---


=== Use

1. Add in the action where you will need to load the countries for the view: <tt>@data = get_locations</tt>
2. Add in your view inside of a form: <tt><%= select_location_tag :data %></tt> where "data" is the name of the form
---


=== Controller Methods
<tt>@data = get_locations(country_id = 0, state_id = 0, city_id = 0)</tt> gets the countries, the states of the first selected country, and the cities of the first state inside of 3 collections: @countries, @states, @cities. The parameters are for pre-select the options in the dropdowns.

Also, you can make this:
<tt>@data2 = get_locations({mode: "exclude", countries: ["Japan", "El Salvador", "Colombia", "Jamaica", "Spain"]})</tt> will get all countries except these ones
<tt>@data3 = get_locations({mode: "include", countries: ["Japan", "El Salvador", "Colombia", "Jamaica", "Spain"]})</tt> will get only these countries

---


=== Helper Methods
<tt>select_location_tag(form_name, params = {})</tt> display the dropdowns for the locations. This is an example of a hash for params:

    
    ...
    params = {
      block:  "main",
      country:  {
        name:  "country_field_name",
        html_class:  "some_class"
      },
      state:  {
        name:  "state_field_name",
        html_class:  "some_class"
      },
      city:  {
        name:  "city_field_name",
        html_class:  "some_class"
      },
      data: @data
    }
    ...

Where <tt>block</tt> defines an id, so you can use the helper as many times you want changing the value in this key; the configurations for country, state and city are separated and in each one you can define the field name and the class you want to use for each element.